m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(matrix_example)
cachemean(m)
solve(x)
x
ma
ma(x)
makeCacheMatrix(ma)
makeCacheMatrix <- function(x= matrix(x)) {m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}}
makeCacheMatrix <- function(x = matrix(x)) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix(x)
z <- makeVector(x)
z
cachemean(z)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
retval <- list(set = set, get = get,
setmean = setmean,
getmean = getmean)
retval$set(x)
retval
}
cacheSolve(z)
cacheSolve(x)
makeVector1 <- function(x = numeric()) {
m <- NULL
set <- function(y) {
message("inside set()")
x <<- y
m <<- NULL
}
get <- function() {
message("inside get()")
x
}
setmean <- function(mean) {
message("inside setmean()")
m <<- mean
}
getmean <- function() {
message("inside getmean()")
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean1 <- function(x, ...) {
m2 <- x$getmean()
if(!is.null(m2)) {
message("getting cached data")
return(m2)
}
data <- x$get()
m2 <- mean(data, ...)
x$setmean(m2)
m2
}
a
b <- makeVector1(a)
cachemean1(b)
cachemean1(b)
makeCacheMatrix <- function(x = matrix()) {     ## this is the function
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x)
get(x)
get
getinverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(x)
cacheSolve()
d <- makeCacheMatrix(x)
d
cacheSolve(d)
class(d)
cacheSolve(d)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(d)
d$getinverse( )
d$getinverse(d)
solve(x)
makeCacheMatrix <- function(x = matrix()) {     ## this is the function
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix
makecachematrix(x)
makeCacheMatrix(x)
d <- makeCacheMatrix(x)
solve(d)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(d)
C <- matrix(1:4, 2,2)
c
C
D <- makeCacheMatrix(C)
D
D$get()
class(D$get())
cacheSolve(D)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve(D)
cacheSolve <- function(x, ...) {
s <- x$solve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$solve(s)
s
}
cacheSolve(D)
makeCacheMatrix(D)
makeCasheMatrix(x)
Solve(D)
solve(D)
solve(x)
solve(C)
corr <- function(directory="specdata", threshold=0) {
setwd(paste("/Users/usaid/datasciencecoursera/", directory, sep = ""))
result <- numeric(0)
allfiles <- list.files(directory)
for(i in id){
file <- read.csv(directory[i] , header = TRUE)
result<-file[complete.cases(file), ]
if(nrow(result)>threshold){
final<- append(pass,cor(result$nitrate,result$sulfate))
{
}
return(final)
}
corr <- function(directory, threshold=0) {
setwd(paste("/Users/usaid/datasciencecoursera/", directory, sep = ""))
result <- numeric(0)
final <- NULL
allfiles <- list the files
for(i in id){
file <- read.csv(directory[i] , header = TRUE)
result<-file[complete.cases(file), ]
if(nrow(result)>threshold){
final <- append(final,cor(result$nitrate,result$sulfate))
{
}
return(final)
}
corr <- function(directory, threshold=0) {
setwd(paste("/Users/usaid/datasciencecoursera/", directory, sep = ""))
result <- numeric(0)
final <- NULL
allfiles <- list the files
for(i in id){
dat1<- read.csv(file = fullPath, header=TRUE)
a<- complete.cases(dat1)
m<-matrix(nrow=length(dat1[a,1]), ncol=2)
m[,1] <- dat1[a,2]
m[,2]<- dat1[a,3]
if(nrow(result)>threshold){
final <- append(final,cor(result$nitrate,result$sulfate))
{
}
return(final)
}
library(datasets)
data(iris)
?iris
iris()
list(iris)
s<-split(Sepal.Length, Sepal.Length$virginica)
s<-split("Sepal.Length", Sepal.Length$virginica)
s<-split(iris, 3, 3$virginica)
lapply<-s, function(iris) colMeans(iris[,c("Petal.Length", 'virginica')])
lapply(s, function(iris) colMeans(iris[,c("Petal.Length", 'virginica')])
simplify = TRUE)
i<-iris
apply(1, 3, mean)
apply(i, 3, mean)
sl<-"Sepal.Length"
lapply(split, sl, ncol=virginica)
s<-split(Sepal.Length, Species=virginica)
sp<- Species = virginica
sp<-Species = "virginica"
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1], mean)
apply(iris[,1, 101:150])
apply(iris[, 101:150], 1, mean)
apply(iris[, 101:150], ncol=1, mean)
apply(iris[, 101:150], 1, mean)
apply(iris[,101:150], 4, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
colMeans(1:4)
colMeans[1:4]
colMeans(iris)
list(iris)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1], 101:150, mean)
spec<- col="virginica"
spec<- "Species" = 'virginica'
s<- split(Species, Species$Sepal.Length)
apply(iris, 101:150, 5, mean)
apply(iris, 101:150, mean)
apply(iris, 101, mean)
apply(i, 101, mean)
i <- iris
i
rowMeans(i)
apply(i, 2, mean)
v1<-c([,101:150, 1])
v1<- c(101:150, 1)
v1
v1<-c(iris([,101:150], 1))
v1<-c(iris([,101:150, 1]))
v1<-iris("Sepal.Length")
v1< list(i)
list(1)
list(i)
s<-split(Sepal.Length, Sepal.Length$Species)
lapply(split, i)
means(i[,101:150], 1)
colmeans(i[,101:150])
colMeans(i[,101:150])
colMeans(i[,101:150], 1)
colMeans(i[1])
colMeans(i[1], rows=101:150)
row<- i(101:150)
row <- nrows[,101:150]
x<- cbind(i[,1], 101:150)
list(x)
list(i)
x.iris <-data.fram(i)
x.iris <-data.frame(i)
x.iris
names(x.iris)
x.sub<-subset(x.iris, 1)
x.sub<-subset(x.iris, "Species"="virginica"
)
s.sub
x.sub
x.sub<-subset(x.iris, name="virginica"")
"virginica" = TRUE
x.sub<-subset(x.iris, name="virginica")
x.sub
x.sub<-subset(x.iris, col=1)
x.sub
x.sub<-subset(x.iris, colname="virginica")
x.sub
x.sub<-subset(x.iris, Species="virginica")
x.sub
x.sub1<-subset(x.iris, [, 1])
x.sub1<-subset(x.iris[, 1])
x.sub1<-x.iris, [, 1]
x.sub1<- x.iris[, 1]
x.sub1
x.sub2<-x.iris [c(101:150), 1]
x.sub2
mean(x.sub2)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
debug(ls)
ls()
apply(iris[, 1:4], 1, mean)
exit
quit
library(datasets)
data(iris)
?iris
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
lapply(mtcars, mean, simplify=TRUE)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
quit
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
install.packages("~/Downloads/data.table_1.9.2.tgz", repos = NULL)
install.packages("data.table")
install.packages("~/Downloads/data.table_1.9.2 (1).tgz", repos = NULL)
install.packages("data.table")
install.packages("data.table")
install.packages("~/Downloads/data.table_1.9.2.tgz", repos = NULL)
install.packages("data.table")
install.packages("~/Downloads/data.table_1.9.2.tgz", repos = NULL)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("~/Downloads/data.table_1.9.2 (1).tgz", repos = NULL)
library(xlsx)
sessionInfo()
library(data.table)
help("data.table")
## Simple lattice plot
library(lattice) ## Load lattice package
library(datasets) ## Call a data set
xyplot(Ozone ~ Wind, data = airquality)  # Create a simple scatterplot
airquality <- transform(airquality, Month = factor(Month)) ## Convert 'Month' to a factor variable
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1)) # Create scatterplot
library(ggplot2)
str(mpg)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(hwy, data = mgp, fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv.~, binwidth = 2)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
str(maacs)
xyplot(Ozone ~ Wind, data = airquality)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(method = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
?lattice
install.packages("kernlab")
library(kernlab)
install.packages("xtable")
install.packages("shiny")
setwd("/Users/usaid/Desktop/Producing Data Products/Assignment/hiv-demo-app")
in.name <- "hiv_prevalence.csv"
out.name <- "hiv_data.RData"
ds <- read.csv(paste(getwd(), in.name, sep = "/"))
save(ds, file = paste(getwd(), out.name, sep = "/"))
library(shiny)
library(ggplot2)
library(shinyapps)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
load("hiv_data.RData")
shiny::runApp()
setwd("/Users/usaid/Desktop/Producing Data Products/Assignment/hiv-demo-app")
in.name <- "hiv_prevalence.csv"
out.name <- "hiv_data.RData"
ds <- read.csv(paste(getwd(), in.name, sep = "/"))
save(ds, file = paste(getwd(), out.name, sep = "/"))
library(shiny)
load("hiv_data.RData")
library(shiny)
library(ggplot2)
library(shinyapps)
shiny::runApp()
shiny::runApp()
setwd("/Users/usaid/Desktop/Producing Data Products/Assignment/hiv-demo-app")
in.name <- "hiv_prevalence.csv"
out.name <- "hiv_data.RData"
ds <- read.csv(paste(getwd(), in.name, sep = "/"), stringsAsFactors = FALSE)
save(ds, file = paste(getwd(), out.name, sep = "/"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
